server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_SERVLET_CONTEXT_PATH:/}
    encoding:
      charset: ${SERVER_SERVLET_ENCODING_CHARSET:UTF-8}
      enabled: ${SERVER_SERVLET_ENCODING_ENABLED:true}
      force: ${SERVER_SERVLET_ENCODING_FORCE:true}

spring:
  servlet:
    multipart:
      max-file-size: ${SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE:300MB}
      max-request-size: ${SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE:300MB}

  main:
    allow-circular-references: ${SPRING_MAIN_ALLOW_CIRCULAR_REFERENCES:true}

  #profiles:
    #include: ${SPRING_PROFILES_INCLUDE:db}

  jpa:
    show-sql: ${SPRING_JPA_SHOW_SQL:true}
    properties:
      hibernate:
        show_sql: ${SPRING_JPA_PROPERTIES_HIBERNATE_SHOW_SQL:true}
        format_sql: ${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL:true}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
            redirect-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI}
            authorization-grant-type: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_AUTHORIZATION_GRANT_TYPE}
            scope: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_SCOPE}

          naver:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT_SECRET}
            redirect-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_REDIRECT_URI}
            authorization-grant-type: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_AUTHORIZATION_GRANT_TYPE}
            scope: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_SCOPE}
            client-name: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT_NAME}

          kakao:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_ID}
            redirect-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_REDIRECT_URI}
            client-authentication-method: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_AUTHENTICATION_METHOD}
            authorization-grant-type: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_AUTHORIZATION_GRANT_TYPE}
            scope: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_SCOPE}
            client-name: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_NAME}

        provider:
          google:
            authorization-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_AUTHORIZATION_URI}
            token-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_TOKEN_URI}
            user-info-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_USER_INFO_URI}

          naver:
            authorization-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_AUTHORIZATION_URI}
            token-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_TOKEN_URI}
            user-info-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_USER_INFO_URI}
            user-name-attribute: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_USER_NAME_ATTRIBUTE}

          kakao:
            authorization-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_AUTHORIZATION_URI}
            token-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_TOKEN_URI}
            user-info-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_USER_INFO_URI}
            user-name-attribute: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_USER_NAME_ATTRIBUTE}

file:
  dir: ${FILE_DIR:C:\Users\SSAFY\Desktop\파일저장}

OPENVIDU_URL: ${OPENVIDU_URL:https://i9d201.p.ssafy.io:8443/}
OPENVIDU_SECRET: ${OPENVIDU_SECRET:CRITCRIT}

logging:
  level:
    org:
      hibernate:
        type:
          descriptor:
            sql: ${LOGGING_LEVEL_ORG_HIBERNATE_TYPE_DESCRIPTOR_SQL:debug}
    com:
      amazonaws:
        util:
          EC2MetadataUtils: ${LOGGING_LEVEL_COM_AMAZONAWS_UTIL_EC2METADATAUTILS:ERROR}

app:
  auth:
    token-secret: ${APP_AUTH_TOKEN_SECRET:critservicecritservice}

cloud:
  aws:
    s3:
      bucket: ${CLOUD_AWS_S3_BUCKET:critservice}
    credentials:
      access-key: ${CLOUD_AWS_CREDENTIALS_ACCESS_KEY}
      secret-key: ${CLOUD_AWS_CREDENTIALS_SECRET_KEY}
    region:
      static: ${CLOUD_AWS_REGION_STATIC:ap-northeast-2}
      auto: ${CLOUD_AWS_REGION_AUTO:false}
    stack:
      auto: ${CLOUD_AWS_STACK_AUTO:false}
